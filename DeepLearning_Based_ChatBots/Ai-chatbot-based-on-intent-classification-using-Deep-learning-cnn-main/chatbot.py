# -*- coding: utf-8 -*-
"""chatbot.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1feCkdIYr8e1V5KIzxxooJr5o2bRK4R4p
"""

import tkinter as tk
from tkinter import scrolledtext

import nltk
import random
import numpy as np
import json
import pickle
from nltk.stem import WordNetLemmatizer
from tensorflow.keras.models import load_model
lemmatizer=WordNetLemmatizer()

with open('intents.json') as json_file:
    intents = json.load(json_file)

words=pickle.load(open('words.pkl','rb'))
classes=pickle.load(open('classes.pkl','rb'))
model=load_model('chatbot_model.h5')

def clean_up_sentence(sentence):
  sentence_words=nltk.word_tokenize(sentence)
  sentence_words=[lemmatizer.lemmatize(word) for word in sentence_words]
  return sentence_words

def bag_of_words(sentence):
  sentence_words=clean_up_sentence(sentence)
  bag=[0]*len(words)
  for w in sentence_words:
    for i,word in enumerate(words):
      if word == w:
        bag[i]=1
  return np.array(bag)



#In summary, the predict_class function predicts the intent of a given sentence based on the trained model,
#  while the get_response function retrieves a suitable response based on the predicted intent and a predefined 
# set of responses stored in a JSON object. These functions together form the core logic of a 
# simple chatbot system for responding to user queries based on predefined intents and responses.

def predict_class(sentence):
  bow=bag_of_words(sentence)
  res=model.predict(np.array([bow]))[0]
  ERROR_THRESHOLD=0.25
  results=[[i,r] for i,r in enumerate(res) if r> ERROR_THRESHOLD] #res contains class/tag with corresponding probability predicted by model

  results.sort(key=lambda x:x[1],reverse=True)
  return_list=[]
  for r in results:
    return_list.append({'intent': classes[r[0]],'probability':str(r[1])})
  return return_list

def get_response(intents_list,intents_json):
  tag=intents_list[0]['intent']
  list_of_intents=intents_json['intents']
  for i in list_of_intents:
    if i['tag']==tag:
      result=random.choice(i['responses'])
      break
  return result


# Create the main window
window = tk.Tk()
window.title("Chatbot")

# Create chat log
chat_log = scrolledtext.ScrolledText(window, width=50, height=20, state=tk.DISABLED)
chat_log.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

# Create input field
user_input = tk.Entry(window, width=40)
user_input.grid(row=1, column=0, padx=10, pady=10)

def send_message():
    message = user_input.get()
    user_input.delete(0, tk.END)
    chat_log.config(state=tk.NORMAL)
    chat_log.insert(tk.END, "You: " + message + "\n\n")
    chat_log.config(state=tk.DISABLED)

    # Process message and get response
    ints = predict_class(message)
    response = get_response(ints, intents)

    chat_log.config(state=tk.NORMAL)
    chat_log.insert(tk.END, "Bot: " + response + "\n\n")
    chat_log.config(state=tk.DISABLED)

# Create send button
send_button = tk.Button(window, text="Send", command=send_message)
send_button.grid(row=1, column=1, padx=10, pady=10)

# Run the main event loop
window.mainloop()



print("GO! BOT IS RUNNING")


while True:
  message=input("")
  ints=predict_class(message)
  res=get_response(ints,intents)
  print(res)

